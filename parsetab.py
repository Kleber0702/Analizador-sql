
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND_KEYWORD ASTERISK AUTO_INCREMENT COMMA CREATE DATABASE DECIMAL DELETE EXISTS FOREIGN_KEY FROM ID IF INSERT INT INTO LPAREN NOT NUMBER OR_KEYWORD PRIMARY PRIMARY_KEY REFERENCES RPAREN SELECT SEMICOLON SET STRING TABLE UPDATE USE VALUES VARCHAR WHERE\n    statement : create_db_statement\n              | use_db_statement\n              | create_table_statement\n              | empty\n              | insert_statement\n              | update_statement\n              | delete_statement\n              | select_statement \n\n    \n    create_db_statement : CREATE DATABASE IF NOT EXISTS ID SEMICOLON\n                        | CREATE DATABASE ID SEMICOLON\n    \n    use_db_statement : USE ID SEMICOLON\n    \n    create_table_statement : CREATE TABLE IF NOT EXISTS ID LPAREN column_definitions RPAREN SEMICOLON\n                           | CREATE TABLE ID LPAREN column_definitions RPAREN SEMICOLON\n    \n    column_definitions : column_definition\n                       | column_definitions COMMA column_definition\n    \n    column_definition : ID data_type column_constraints\n    \n    data_type : INT\n              | VARCHAR LPAREN NUMBER RPAREN\n              | DECIMAL LPAREN NUMBER COMMA NUMBER RPAREN\n    \n    column_constraints : AUTO_INCREMENT\n                       | PRIMARY_KEY\n                       | FOREIGN_KEY LPAREN ID RPAREN REFERENCES ID LPAREN ID RPAREN\n    empty :\n    select_statement : SELECT ASTERISK FROM ID SEMICOLON\n    \n    insert_statement : INSERT INTO ID LPAREN id_list RPAREN VALUES LPAREN value_list RPAREN SEMICOLON\n    \n    update_statement : UPDATE ID SET assignment_list WHERE condition SEMICOLON\n    \n    delete_statement : DELETE FROM ID WHERE condition SEMICOLON\n    \n    id_list : ID\n            | id_list COMMA ID\n    \n    value_list : value\n               | value_list COMMA value\n    \n    value : NUMBER\n          | STRING\n    \n    assignment_list : assignment\n                    | assignment_list COMMA assignment\n    \n    assignment : ID '=' value\n    \n    condition : ID '=' value\n              | condition AND_KEYWORD condition\n              | condition OR_KEYWORD condition\n    "
    
_lr_action_items = {'CREATE':([0,],[10,]),'USE':([0,],[11,]),'$end':([0,1,2,3,4,5,6,7,8,9,27,33,54,71,74,82,86,101,108,],[-23,0,-1,-2,-3,-4,-5,-6,-7,-8,-11,-10,-24,-27,-9,-13,-26,-12,-25,]),'INSERT':([0,],[12,]),'UPDATE':([0,],[13,]),'DELETE':([0,],[14,]),'SELECT':([0,],[15,]),'DATABASE':([10,],[16,]),'TABLE':([10,],[17,]),'ID':([11,13,16,17,19,21,29,31,35,36,40,42,43,50,51,62,64,72,73,75,91,106,111,],[18,20,24,26,28,30,37,41,44,47,52,55,56,52,37,44,85,52,52,44,96,110,112,]),'INTO':([12,],[19,]),'FROM':([14,22,],[21,31,]),'ASTERISK':([15,],[22,]),'IF':([16,17,],[23,25,]),'SEMICOLON':([18,24,41,53,55,61,66,67,68,87,88,89,95,104,],[27,33,54,71,74,82,-32,-33,86,-37,-38,-39,101,108,]),'SET':([20,],[29,]),'NOT':([23,25,],[32,34,]),'LPAREN':([26,28,56,59,60,79,84,110,],[35,36,75,80,81,91,94,111,]),'WHERE':([30,38,39,65,66,67,69,],[40,50,-34,-36,-32,-33,-35,]),'EXISTS':([32,34,],[42,43,]),'=':([37,52,],[49,70,]),'COMMA':([38,39,45,46,47,48,65,66,67,69,76,77,78,83,85,90,93,99,100,109,113,],[51,-34,62,-14,-28,64,-36,-32,-33,-35,-16,-20,-21,-15,-29,62,98,105,-30,-31,-22,]),'INT':([44,],[58,]),'VARCHAR':([44,],[59,]),'DECIMAL':([44,],[60,]),'RPAREN':([45,46,47,48,66,67,76,77,78,83,85,90,92,96,99,100,103,109,112,113,],[61,-14,-28,63,-32,-33,-16,-20,-21,-15,-29,95,97,102,104,-30,107,-31,113,-22,]),'NUMBER':([49,70,80,81,94,98,105,],[66,66,92,93,66,103,66,]),'STRING':([49,70,94,105,],[67,67,67,67,]),'AND_KEYWORD':([53,66,67,68,87,88,89,],[72,-32,-33,72,-37,72,72,]),'OR_KEYWORD':([53,66,67,68,87,88,89,],[73,-32,-33,73,-37,73,73,]),'AUTO_INCREMENT':([57,58,97,107,],[77,-17,-18,-19,]),'PRIMARY_KEY':([57,58,97,107,],[78,-17,-18,-19,]),'FOREIGN_KEY':([57,58,97,107,],[79,-17,-18,-19,]),'VALUES':([63,],[84,]),'REFERENCES':([102,],[106,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'create_db_statement':([0,],[2,]),'use_db_statement':([0,],[3,]),'create_table_statement':([0,],[4,]),'empty':([0,],[5,]),'insert_statement':([0,],[6,]),'update_statement':([0,],[7,]),'delete_statement':([0,],[8,]),'select_statement':([0,],[9,]),'assignment_list':([29,],[38,]),'assignment':([29,51,],[39,69,]),'column_definitions':([35,75,],[45,90,]),'column_definition':([35,62,75,],[46,83,46,]),'id_list':([36,],[48,]),'condition':([40,50,72,73,],[53,68,88,89,]),'data_type':([44,],[57,]),'value':([49,70,94,105,],[65,87,100,109,]),'column_constraints':([57,],[76,]),'value_list':([94,],[99,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> create_db_statement','statement',1,'p_statement','sql_parser.py',19),
  ('statement -> use_db_statement','statement',1,'p_statement','sql_parser.py',20),
  ('statement -> create_table_statement','statement',1,'p_statement','sql_parser.py',21),
  ('statement -> empty','statement',1,'p_statement','sql_parser.py',22),
  ('statement -> insert_statement','statement',1,'p_statement','sql_parser.py',23),
  ('statement -> update_statement','statement',1,'p_statement','sql_parser.py',24),
  ('statement -> delete_statement','statement',1,'p_statement','sql_parser.py',25),
  ('statement -> select_statement','statement',1,'p_statement','sql_parser.py',26),
  ('create_db_statement -> CREATE DATABASE IF NOT EXISTS ID SEMICOLON','create_db_statement',7,'p_create_db_statement','sql_parser.py',33),
  ('create_db_statement -> CREATE DATABASE ID SEMICOLON','create_db_statement',4,'p_create_db_statement','sql_parser.py',34),
  ('use_db_statement -> USE ID SEMICOLON','use_db_statement',3,'p_use_db_statement','sql_parser.py',40),
  ('create_table_statement -> CREATE TABLE IF NOT EXISTS ID LPAREN column_definitions RPAREN SEMICOLON','create_table_statement',10,'p_create_table_statement','sql_parser.py',46),
  ('create_table_statement -> CREATE TABLE ID LPAREN column_definitions RPAREN SEMICOLON','create_table_statement',7,'p_create_table_statement','sql_parser.py',47),
  ('column_definitions -> column_definition','column_definitions',1,'p_column_definitions','sql_parser.py',53),
  ('column_definitions -> column_definitions COMMA column_definition','column_definitions',3,'p_column_definitions','sql_parser.py',54),
  ('column_definition -> ID data_type column_constraints','column_definition',3,'p_column_definition','sql_parser.py',60),
  ('data_type -> INT','data_type',1,'p_data_type','sql_parser.py',66),
  ('data_type -> VARCHAR LPAREN NUMBER RPAREN','data_type',4,'p_data_type','sql_parser.py',67),
  ('data_type -> DECIMAL LPAREN NUMBER COMMA NUMBER RPAREN','data_type',6,'p_data_type','sql_parser.py',68),
  ('column_constraints -> AUTO_INCREMENT','column_constraints',1,'p_column_constraints','sql_parser.py',74),
  ('column_constraints -> PRIMARY_KEY','column_constraints',1,'p_column_constraints','sql_parser.py',75),
  ('column_constraints -> FOREIGN_KEY LPAREN ID RPAREN REFERENCES ID LPAREN ID RPAREN','column_constraints',9,'p_column_constraints','sql_parser.py',76),
  ('empty -> <empty>','empty',0,'p_empty','sql_parser.py',81),
  ('select_statement -> SELECT ASTERISK FROM ID SEMICOLON','select_statement',5,'p_select_statement','sql_parser.py',86),
  ('insert_statement -> INSERT INTO ID LPAREN id_list RPAREN VALUES LPAREN value_list RPAREN SEMICOLON','insert_statement',11,'p_insert_statement','sql_parser.py',95),
  ('update_statement -> UPDATE ID SET assignment_list WHERE condition SEMICOLON','update_statement',7,'p_update_statement','sql_parser.py',101),
  ('delete_statement -> DELETE FROM ID WHERE condition SEMICOLON','delete_statement',6,'p_delete_statement','sql_parser.py',107),
  ('id_list -> ID','id_list',1,'p_id_list','sql_parser.py',113),
  ('id_list -> id_list COMMA ID','id_list',3,'p_id_list','sql_parser.py',114),
  ('value_list -> value','value_list',1,'p_value_list','sql_parser.py',120),
  ('value_list -> value_list COMMA value','value_list',3,'p_value_list','sql_parser.py',121),
  ('value -> NUMBER','value',1,'p_value','sql_parser.py',127),
  ('value -> STRING','value',1,'p_value','sql_parser.py',128),
  ('assignment_list -> assignment','assignment_list',1,'p_assignment_list','sql_parser.py',134),
  ('assignment_list -> assignment_list COMMA assignment','assignment_list',3,'p_assignment_list','sql_parser.py',135),
  ('assignment -> ID = value','assignment',3,'p_assignment','sql_parser.py',141),
  ('condition -> ID = value','condition',3,'p_condition','sql_parser.py',147),
  ('condition -> condition AND_KEYWORD condition','condition',3,'p_condition','sql_parser.py',148),
  ('condition -> condition OR_KEYWORD condition','condition',3,'p_condition','sql_parser.py',149),
]
